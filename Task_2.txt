* Memory Mapped I/O -
OSR	EQU $E3
ODR	EQU $E2
ISR	EQU $E1
IDR	EQU $E0

	ORG 0000
	MOVE $D0,SP



	JSR input
	MOVE #$00,A
	MOVE A,total
	CMP #$31,B
	BEQ add_8
add_8r	JSR input
	CMP #$31,B
	BEQ add_4
add_4r	JSR input
	CMP #$31,B
	BEQ add_2
add_2r	JSR input
	CMP #$31,B
	BEQ add_1
add_1r	MOVE #$0A,B
	JSR output
	JMP print
	

    * input status check and take input -

input	PUSH A
i_check	
	MOVE ISR,A
	CMP #$00,A
	BEQ #i_check
	MOVE IDR,B
	JSR output
	POP A
	RTS


add_8	MOVE #$00,A
	MOVE total,A
	ADD #$08,A
	MOVE A,total
	JMP add_8r

add_4	MOVE #$00,A
	MOVE total,A
	ADD #$04,A
	MOVE A,total
	JMP add_4r

add_2	MOVE #$00,A
	MOVE total,A
	ADD #$02,A
	MOVE A,total
	JMP add_2r

add_1	MOVE #$00,A
	MOVE total,A
	ADD #$01,A
	MOVE A,total
	JMP add_1r


print	MOVE #$0,A
	MOVE #$0,B
	MOVE total,B
	CMP #$0A,B
	BMI nxt_ln
	JMP higher
nxt_ln	JMP lower
back	MOVE #$0A,B
	JSR output
	MOVE #$0A,B
	JSR output
	JMP done

lower	ADD #$30,B
	JSR output
	JMP back


higher	PUSH B
	MOVE #$31,B
	JSR output
	POP B
	SUB #$0A,B
	ADD #$30,B
	JSR output
	JMP back

    * output status check and print output -


output	PUSH A
o_check	
	MOVE OSR,A
	CMP #$00,A
	BEQ #o_check
	MOVE B,ODR
	POP A
	RTS

done	HALT

total DC.W 0